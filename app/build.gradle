import java.util.regex.Pattern
apply plugin: 'com.android.model.application'

model {
android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    
    defaultConfig.with {
        applicationId "fr.enst.friendshipismagic.app"
        minSdkVersion.apiLevel 15
        targetSdkVersion.apiLevel 23
        versionCode 1 //getVersionCodeFromManifest()
        versionName "1.0.0"
    }

    ndk {
        moduleName "native-activity"
        stl "c++_shared"
        cppFlags.add("-std=c++11")
        cppFlags.add("-fexceptions")
        cppFlags.add("-I src/")
        ldLibs.addAll(['log', 'android'])
    }


    abis {
        create("armeabi") {

        }
    }
    sources {
        main {
            java {
                source {
                    srcDir "src/main/java"
                }
            }
            jni {
                source {
                    srcDir "src/main/cpp"
                }
                dependencies {
                    library "sfml-graphics" linkage "shared"
                    library "sfml-window" linkage "shared"
                    library "sfml-network" linkage "shared"
                    library "sfml-system" linkage "shared"
                    //project ':nativeactivity' linkage 'static'
                }
            }
        }
    }

    //jni.source.srcDir "../lib
    //jniLibs.srcDirs = ['../libs' ]


    buildTypes {
        release {
            minifyEnabled false
        }
    }

/*    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }*/
}}

dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile fileTree(include: '*.jar', dir: '../libs')
    //compile fileTree(dir: '../libs', include: '*.so')
}

/*def getVersionCodeFromManifest() {
    def manifestFile = file(android.sourceSets.main.manifest.srcFile)
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}*/
